from haversine import haversine
import numpy as np
import pandas as pd

np.set_printoptions(threshold=np.inf)

# 주어진 좌표값 (위도, 경도)
coordinates = np.array([
    (37.54602822, 127.0772313),
    (37.55193887, 127.0693827),
    (37.55534026, 127.0712975),
    (37.5574868, 127.0725526),
    (37.55218712, 127.0686201),
    (37.55118021, 127.0677194),
    (37.55073854, 127.0687074),
    (37.54900258, 127.0677474),
    (37.55034437, 127.0670679),
    (37.54957429, 127.0664413),
    (37.54951566, 127.0665318),
    (37.55030467, 127.0671618),
    (37.5511351, 127.0678257),
    (37.55874099, 127.0756461),
    (37.55879373, 127.0749003),
    (37.55609891, 127.0824731),
    (37.556267, 127.081557),
    (37.55449655, 127.0865505),
    (37.55120847, 127.0901492),
    (37.55242293, 127.0892452),
    (37.554926, 127.085229),
    (37.54891832, 127.0934986),
    (37.54895793, 127.0926145),
    (37.545741, 127.102649),
    (37.56153286, 127.075203),
    (37.56238618, 127.0752287),
    (37.55921103, 127.0775414),
    (37.55908662, 127.0776319),
    (37.56026752, 127.0782794),
    (37.56094951, 127.0784952),
    (37.56245368, 127.0794725),
    (37.56261501, 127.0794161),
    (37.5652136, 127.0809935),
    (37.56229075, 127.0818721),
    (37.55988373, 127.0808553),
    (37.55984027, 127.0811552),
    (37.56308993, 127.0828472),
    (37.56388824, 127.0833601),
    (37.56207257, 127.0870619),
    (37.55995657, 127.0873831),
    (37.55831636, 127.0876755),
    (37.56148909, 127.0839868),
    (37.56640123, 127.0778997),
    (37.56579555, 127.077177),
    (37.56549744, 127.0809972),
    (37.56634043, 127.081615),
    (37.56685307, 127.0817412),
    (37.56863463, 127.0828854),
    (37.56849153, 127.0826419),
    (37.56791599, 127.0860566),
    (37.56793345, 127.0855902),
    (37.56604642, 127.0845455),
    (37.56396603, 127.0867086),
    (37.567868, 127.0863735),
    (37.56419922, 127.0869681),
    (37.56269505, 127.0873094),
    (37.55831895, 127.0879298),
    (37.55419672, 127.088669),
    (37.55204586, 127.0770315),
    (37.55517668, 127.0786347),
    (37.54524958, 127.0839777),
    (37.54701783, 127.0665273),
    (37.54493286, 127.0845805),
    (37.54153366, 127.0836883),
    (37.54308737, 127.0846474),
    (37.54221081, 127.084359),
    (37.53898638, 127.0835191),
    (37.53770269, 127.0879773),
    (37.5446547, 127.0891035),
    (37.54925157, 127.0897847),
    (37.54864168, 127.0895859),
    (37.54565109, 127.085747),
    (37.54581736, 127.0863481),
    (37.54496382, 127.0890507),
    (37.5395525, 127.0940087),
    (37.53958474, 127.0942543),
    (37.537998, 127.090409),
    (37.53602601, 127.0934996),
    (37.536867, 127.093756),
    (37.53785446, 127.0965438),
    (37.5433927, 127.09321),
    (37.54338872, 127.0936876),
    (37.54179703, 127.097463),
    (37.54201285, 127.0990747),
    (37.543536, 127.102963),
    (37.53848833, 127.0831531),
    (37.53688927, 127.0826036),
    (37.5367503, 127.0821045),
    (37.53784443, 127.0786588),
    (37.53747939, 127.0787965),
    (37.53894901, 127.0749259),
    (37.53275, 127.077319),
    (37.53157273, 127.0814131),
    (37.53219224, 127.084608),
    (37.53295532, 127.0848057),
    (37.53036949, 127.0750133),
    (37.53270034, 127.0768713),
    (37.53153084, 127.0807387),
    (37.53528224, 127.0844078),
    (37.53197322, 127.0846733)
])

# 맨해튼 거리를 저장할 행렬 초기화
haversine_manhattan_distances_matrix = np.zeros((100, 100))

# 좌표 간의 맨해튼 거리 계산 (가로 세로 각각에 대해 하버사인 적용)
for i in range(100):
    for j in range(100):
        if i != j:
            # 좌표 간의 가로, 세로 거리 계산
            lat1, lon1 = coordinates[i]
            lat2, lon2 = coordinates[j]
            horizontal_distance = haversine((lat1, lon1), (lat1, lon2))
            vertical_distance = haversine((lat1, lon2), (lat2, lon2))
            
            # 가로 세로 거리의 합을 맨해튼 거리로 사용
            haversine_manhattan_distance = horizontal_distance + vertical_distance
            
            # 맨해튼 거리를 행렬에 저장
            haversine_manhattan_distances_matrix[i, j] = haversine_manhattan_distance

# 맨해튼 거리 데이터프레임 생성
df_manhattan = pd.DataFrame(haversine_manhattan_distances_matrix)

# 엑셀 파일로 저장 (바탕 화면 경로)
desktop_path = "C:/Users/User/OneDrive/바탕 화면/"
df_manhattan.to_excel(desktop_path + 'haversine_manhattan_distances.xlsx', index=False)

# 유클리드 거리를 저장할 행렬 초기화
haversine_distances_matrix = np.zeros((100, 100))

# 좌표 간의 유클리드 거리 계산 (haversine 함수 적용)
for i in range(100):
    for j in range(100):
        if i != j:
            # 주석으로 표시된 부분이 행렬의 값입니다.
            haversine_distances_matrix[i, j] = haversine(coordinates[i], coordinates[j])

# 유클리드 거리 데이터프레임 생성
df_euclidean = pd.DataFrame(haversine_distances_matrix)

# 엑셀 파일로 저장 (바탕 화면 경로)
df_euclidean.to_excel(desktop_path + 'haversine_euclidean_distances.xlsx', index=False)
